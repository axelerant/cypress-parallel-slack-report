name: Cypress Tests
on: [push]
permissions:
  contents: write
jobs:
  setup:
    name: Pre-test üõ† 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Clean & create report directory
        run: |
          rm -rf mochawesome-report/ 
          mkdir reports 
        
  execution:
    name: Execution ‚è≥
    needs: setup
    timeout-minutes: 30
    env:
      total_runners: 6
    strategy:
      fail-fast: false
      matrix:
        containers: [ 0, 1, 2, 3, 4, 5 ]
    runs-on: ubuntu-latest   
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Splitting up spec files & storing in GITHUB_ENV
        run: |
          echo "specs=$(node cypress-split.js $total_runners ${{ matrix.containers }})" >> $GITHUB_ENV
      - name: Cypress run 
        uses: cypress-io/github-action@v3
        id: test
        with:
          command: npx cypress run --spec ${{ env.specs }}
          browser: chrome
        continue-on-error: true
      - name: Copy test execution screenshots & videos
        if: steps.test.outcome == 'failure'
        run: |
          mkdir public
          cp -r cypress/videos public/videos
          cp -r Screenshots/**/*.png public
      - name: Upload mochawesome report
        uses: actions/upload-artifact@v3
        with:
          name: test-reports-${{ matrix.containers }}
          path: mochawesome-report
      - name: Upload failed tests screenshots & videos
        uses: actions/upload-artifact@v3
        if: steps.test.outcome == 'failure'
        with:
          name: Failed tests screenshots & videos
          path: public
          
  reporting:
    name: Reporting üöÄ
    needs: execution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: cypress-io/github-action@v5
        with:
          runTests: false
      - name: Download failed tests screenshots & videos
        uses: actions/download-artifact@v3
        with:
          name: Failed tests screenshots & videos
          path: public
        continue-on-error: true
      - name: Download test-reports
        uses: actions/download-artifact@v3
        with:
          path: reports/
      - name: Move all reports into one directory
        run: |
          mkdir -p mochawesome-report
          i=0
          for file in $(find reports -type f -name mochawesome\*.json);do
            filename=$(basename "$file" .json)-"$i".json
            mv "$file" mochawesome-report/"$filename"
            ls mochawesome-report
            i=$((i + 1))
          done
      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: "public"
      - name: Create report directory if not exist
        if: steps.check_files.outputs.files_exists == 'false'
        run: mkdir public 
      - name: Merge and generate reports
        run: |
          npx mochawesome-merge > public/index.json
          npx mochawesome-report-generator --reportDir public public/index.json
      - name: Upload a final report
        uses: actions/upload-artifact@v3
        with:
          name: Final report
          path: public
      - name: Deploy to GitHub Pages 
        uses: peaceiris/actions-gh-pages@v3.7.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./public
      - name: Slack notification
        run: |
          npx cypress-slack-reporter --ci-provider none --report-dir public 
          curl -X POST -H 'Content-type: application/json' --data '{"text":"*_Here is the generated HTML report!! üöÄ_*"}' $SLACK_WEBHOOK_URL
          curl -X POST -H 'Content-type: application/json' --data '{"text":"https://kosalai-personal.github.io/parallel-slack/"}' $SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Check failed tests screenshots exists
        id: failed_screenshots
        uses: andstor/file-existence-action@v2
        with:
          files: "public/*.png"
      - name: Upload failed tests screenshots to slack channel
        if: steps.failed_screenshots.outputs.files_exists == 'true'
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"*_See the failed test screenshots ‚ùå_*"}' $SLACK_WEBHOOK_URL
          npx node slack.js
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}






















